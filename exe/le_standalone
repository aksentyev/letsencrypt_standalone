#!/usr/bin/env ruby
require 'optparse'
require 'json'
require 'acme-client'
require 'fileutils'
require 'webrick'
require 'logger'
require 'letsencrypt_standalone'

# Default logger
logger = LetsencryptStandalone::Base.logger

# Default config
options = {}
options[:config_file] = 'le_standalone.json'

OptionParser.new do |opts|
  opts.banner = "le_standalone [options]"

  opts.on("-c", "--config File", String, "Path to config file. Default: ./le_standalone.json") do |item|
    options[:config_file] = item
  end

  opts.on("-p", "--port N", Integer, "Port. Default: 12080") do |port|
    options[:port] = port
  end

  opts.on("-a", "--add Domains", Array, "Add domain(s) to config, generate key and try to obtain certificate.") do |list|
    options[:domains] = list
  end

  opts.on("-l", "--log File", String, "Log file") do |file|
    # Overwrite default logger with the new one of specified
    logger = LetsencryptStandalone::Base.logger(log_destination: file) if file
  end

  opts.on_tail("--version", "Show version") do
    puts LetsencryptStandalone::VERSION
    exit
  end

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end
end.parse!

begin

  # Config
  config      = LetsencryptStandalone::Config.new(config_file: options[:config_file])
  config.port = options[:port].nil? ? 12080 : options[:port]
  config.add(domains: options[:domains]) if options[:domains]
p options
  # Webrick conf
  FileUtils.mkdir_p(config.www_root)

  Thread.new do
    log = WEBrick::Log.new(logger, WEBrick::Log::DEBUG)
    server = WEBrick::HTTPServer.new :Port => config.port,
                                     :DocumentRoot => config.www_root,
                                     :Logger => log
    server.start
  end

  # Account
  client = LetsencryptStandalone::Client.new  account: config.account,
                                              email: config.email

  # Let's encrypt!
  config.domains.each do |params|
    domain = LetsencryptStandalone::Domain.new(params: params)
    config.push_private_key_name(domain: domain)

    if domain.certificates
      certificate = LetsencryptStandalone::Certificate.new(client: client.acme_client, domain: domain)
      next if !certificate.needs_refresh?
    end

    logger.info "Starting #{domain.host} tasks"
    domain.validate(client: client)

    tries = config.tries
    tries.times do |n|
      begin
        # verified?
        status = domain.verify_status
        if status == 'valid'
          logger.info "Verified #{domain.host} challenge. Obtaining certificate."
          certificate ||= LetsencryptStandalone::Certificate.new(client: client.acme_client, domain: domain)
                            .obtain_new

          certificate.save
          break
        else
          logger.info "Could not verify #{domain.host} challenge. Status #{status}"
          logger.warn "FAIL: Certificate for #{domain.host} has not been obtained during #{tries} tries." if n == tries
        end
        sleep 1
      rescue Acme::Client::Error::Malformed
        next
      end
    end

    # write cert path to config
    if certificate
      config.push_certs_locations(files: certificate.files, domain: domain)
      logger.info "SUCCESS: Certificate for #{domain.host} was obtained"
    end

    logger.info "Finished #{domain.host} tasks"
  end

  # Refresh configuration for future use
  config.config[:account] = client.account
  config.write

  # Make clean
  FileUtils.rm_rf config.www_root

rescue Exception => err
  logger.fatal err
end
